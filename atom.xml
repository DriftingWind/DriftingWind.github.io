<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>漂泊的风</title>
  <subtitle>懂得倾听、懂得尊重、承担责任 才算成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://driftingwind.github.io/"/>
  <updated>2016-06-17T07:55:55.000Z</updated>
  <id>http://driftingwind.github.io/</id>
  
  <author>
    <name>winston</name>
    <email>858156848@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Retrofit、GsonFormat、RxJava、RxAndroid简单实践</title>
    <link href="http://driftingwind.github.io/2016/06/15/reftofit-gsonformat-rxjava-rxandroid/"/>
    <id>http://driftingwind.github.io/2016/06/15/reftofit-gsonformat-rxjava-rxandroid/</id>
    <published>2016-06-15T14:11:54.000Z</published>
    <updated>2016-06-17T07:55:55.000Z</updated>
    
    <content type="html">&lt;p&gt;最近看了简书上很多说retrofit与rxjava的文章，所以今天我也来讲下我是如何用这些最新的东西的。废话不多说，直接上代码&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h3&gt;&lt;p&gt;开发工具肯定是androidstudio，这点以后都不用说了吧，因为现在github上很多东西都是支持androidstudio，目前使用感觉很方便，简单一行，就能把所有的功能引入进来。接下来我会用到rxjava rxandroid retrofit rxlifecycle  具体的这些事什么请自行去查阅，最后的时候，我会放在相关具体介绍的链接&lt;/p&gt;
&lt;h6 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h6&gt;&lt;p&gt;下面一些*version是我在gradle中定义的变量，防止我每次都要改多次的问题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ext {
    butterknifeVersion = &amp;apos;8.0.1&amp;apos;
    supportVersion = &amp;apos;23.2.1&amp;apos;
    retrofit2Version = &amp;apos;2.0.2&amp;apos;
    rxlifecycleVersion = &amp;apos;0.5.0&amp;apos;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面的拷贝项目的build.gradle 而不是工程的里面（又啰嗦了）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compile &amp;apos;io.reactivex:rxjava:1.1.3&amp;apos;
compile &amp;apos;io.reactivex:rxandroid:1.1.0&amp;apos;
compile &amp;quot;com.squareup.retrofit2:retrofit:${retrofit2Version}&amp;quot;
compile &amp;quot;com.squareup.retrofit2:converter-gson:${retrofit2Version}&amp;quot;
compile &amp;quot;com.squareup.retrofit2:adapter-rxjava:${retrofit2Version}&amp;quot;
 compile &amp;quot;com.trello:rxlifecycle:${rxlifecycleVersion}&amp;quot;
compile &amp;quot;com.trello:rxlifecycle-components:${rxlifecycleVersion}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&quot;rxlifecycle说明&quot;&gt;&lt;a href=&quot;#rxlifecycle说明&quot; class=&quot;headerlink&quot; title=&quot;rxlifecycle说明&quot;&gt;&lt;/a&gt;rxlifecycle说明&lt;/h6&gt;&lt;p&gt;此处使用rxlifecycle来处理一些订阅的回收&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trello/RxLifecycle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/trello/RxLifecycle&lt;/a&gt;就使被用来严格控制由于发布了一个订阅后，由于没有及时取消，导致Activity/Fragment无法销毁导致的内存泄露。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然我们要使用rxlifecycle就要按照它的规则来，我把目前的我的BaseActivity 继承 RxAppCompatActivity。具体使用的时候，我再说&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;GsonFormat使用&quot;&gt;&lt;a href=&quot;#GsonFormat使用&quot; class=&quot;headerlink&quot; title=&quot;GsonFormat使用&quot;&gt;&lt;/a&gt;GsonFormat使用&lt;/h3&gt;&lt;p&gt;假如服务端给我个接口，该接口返回json数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;接口地址：http://ip:端口/customer/getAppCutomerList 
请求方式：GET
请求参数(header):
参数名           类型       必填    参数位置        描述
accessToken     string     是     header        token
-------------------------------------------
请求参数(urlParam):
参数名         类型       必填      参数位置     描述
login_name    string    是        urlParam    登录名
pageNumber    int       是        urlParam    页数
name          string    是        urlParam    查询参数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 找个网络请求工具，我用的是Postmain谷歌浏览器的插件,填上对应的数据，按下send就能拿到对应的json&lt;br&gt;   &lt;img src=&quot;http://o8wlu6q9f.bkt.clouddn.com/5131D0FD-7FE4-40DB-81AD-283CC597D00C.png&quot; alt=&quot;postmain&quot;&gt;&lt;br&gt;   好了，拿到服务端返回json可以创建实体了&lt;br&gt;   先随便创建个实体，我这里创建CustomerReturnBean，直接在实体名称上，点击右键generate…选择GsonFormat（前提：你已经装了这个插件）填入上面返回的json，看看对应的属性类型是否是你想要的，没有问题，点击ok，生成对应的实体。&lt;/p&gt;
&lt;h3 id=&quot;Retrofit实例创建&quot;&gt;&lt;a href=&quot;#Retrofit实例创建&quot; class=&quot;headerlink&quot; title=&quot;Retrofit实例创建&quot;&gt;&lt;/a&gt;Retrofit实例创建&lt;/h3&gt;&lt;p&gt;类：AccountsService&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class AccountsService {

private static Retrofit.Builder retrofitBuilder = new Retrofit.Builder()
        .baseUrl(UrlContant.getBaseUrl())
        .addConverterFactory(GsonConverterFactory.create())
        .addCallAdapterFactory(RxJavaCallAdapterFactory.create());

public static AccountsApi createAccountsService() {
    return retrofitBuilder.build().create(AccountsApi.class);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对应的一些请求方法接口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface AccountsApi {
/**
 * 客户搜索查询接口
 *
 * @param loginName
 * @param pageNumber
 * @param name       查询关键字
 * @return
 */
@GET(UrlContant.searchCustomer)
Observable&amp;lt;CustomerReturnBean&amp;gt; searchCustomer(@Query(&amp;quot;login_name&amp;quot;) String     loginName, @Query(&amp;quot;pageNumber&amp;quot;) int pageNumber, @Query(&amp;quot;name&amp;quot;) String     name,@Header(&amp;quot;accessToken&amp;quot;) String accessToken);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为我这里很方法都需要login_name accessToken,这个是登录的时候，获取到保存在本地的。我这里设置个辅助类：&lt;br&gt;类：AccountsApiHelper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class AccountsApiHelper {

private static AccountsApiHelper instance;
private static AccountsApi service;
private String userName;
private String accessToken;

public static synchronized AccountsApiHelper getInstance() {
    if (instance == null) {
        instance = new AccountsApiHelper();
    }
    //初始化一些参数
    instance.init();
    return instance;
}

private void init() {
    if (service == null) {
        service = AccountsService.createAccountsService();
    }

}

private void getValue() {
    userName = AppContext.getInstance().getLoginName();
    accessToken = AppContext.getInstance().getAccessToken();
}
/**
 * 客户搜索查询接口
 * @param pageNumber
 * @param searchValue
 * @return
 */
public Observable&amp;lt;CustomerReturnBean&amp;gt; searchCustomer(int pageNumber,String searchValue){
    getValue();
    return service.searchCustomer(userName,pageNumber,searchValue,accessToken);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 这里实例构建完成了&lt;/p&gt;
&lt;h3 id=&quot;Retrofit-RxJava请求数据&quot;&gt;&lt;a href=&quot;#Retrofit-RxJava请求数据&quot; class=&quot;headerlink&quot; title=&quot;Retrofit+RxJava请求数据&quot;&gt;&lt;/a&gt;Retrofit+RxJava请求数据&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;private void loadData(int pageNumber,final boolean isRefresh,String searchValue) {
    //上面创建的接口
    AccountsApiHelper.getInstance().searchCustomer(pageNumber,searchValue)
                .subscribeOn(Schedulers.io())
                .compose(this.&amp;lt;CustomerReturnBean&amp;gt;bindToLifecycle()) //这里用到rxlifecycle
                .doOnSubscribe(new Action0() { //处理一开始需要的进度条加载，一开始需要的ui里面执行的
                    @Override
                    public void call() {
                        if (!customerWsrefresh.isRefreshing()) {
                            ViewUtils.setViewVisibility(commonLoading, true);
                            newton_cradle_loading.start();
                        }
                    }
                })
                .subscribeOn(AndroidSchedulers.mainThread()) //这里的subscribeOn为上面的doOnSubscribe设定执行线程
                .observeOn(AndroidSchedulers.mainThread())
                .doOnTerminate(new Action0() { //结束执行 关闭进度加载
                    @Override
                    public void call() {
                        ViewUtils.setViewVisibility(commonLoading, false);
                        newton_cradle_loading.stop();
                    }
                })
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Action1&amp;lt;CustomerReturnBean&amp;gt;() {
                    @Override
                    public void call(CustomerReturnBean customerReturnBean) {
                        //成功执行
                        handlerSuccess(customerReturnBean, isRefresh);
                    }
                }, new Action1&amp;lt;Throwable&amp;gt;() {
                    @Override
                    public void call(Throwable throwable) {
                        handlerFailure(isRefresh);
                    }
                });
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里拿到数据，具体后面该怎么展示，各位看官随意。&lt;/p&gt;
&lt;p&gt;各位感觉上面有什么错误和建议，欢迎提问谢谢&lt;/p&gt;
&lt;h3 id=&quot;补充：&quot;&gt;&lt;a href=&quot;#补充：&quot; class=&quot;headerlink&quot; title=&quot;补充：&quot;&gt;&lt;/a&gt;补充：&lt;/h3&gt;&lt;p&gt;有时候，我们需要延迟执行和放重复点击可以用如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.throttleFirst(10,TimeUnit.SECONDS)//重复点击处理
.delay(manualCheck?0:3, TimeUnit.SECONDS)//延迟执行
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;开源让世界更美好&quot;&gt;&lt;a href=&quot;#开源让世界更美好&quot; class=&quot;headerlink&quot; title=&quot;开源让世界更美好&quot;&gt;&lt;/a&gt;开源让世界更美好&lt;/h3&gt;&lt;h3 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1122/3711.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rxlifecycle使用详解，解决RxJava内存泄露问题&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      rxjava、java、android、Retrofit、RxAndroid
    
    </summary>
    
      <category term="Retrofit" scheme="http://driftingwind.github.io/categories/Retrofit/"/>
    
    
      <category term="Java" scheme="http://driftingwind.github.io/tags/Java/"/>
    
      <category term="RxJava" scheme="http://driftingwind.github.io/tags/RxJava/"/>
    
      <category term="Android" scheme="http://driftingwind.github.io/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://driftingwind.github.io/tags/Retrofit/"/>
    
      <category term="RxAnroid" scheme="http://driftingwind.github.io/tags/RxAnroid/"/>
    
      <category term="GsonFormat" scheme="http://driftingwind.github.io/tags/GsonFormat/"/>
    
  </entry>
  
</feed>
