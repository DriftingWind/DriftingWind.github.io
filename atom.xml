<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IAsk风</title>
  <subtitle>懂得倾听、懂得尊重、承担责任 才算成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iaskwind.com/"/>
  <updated>2016-11-18T09:42:03.000Z</updated>
  <id>http://iaskwind.com/</id>
  
  <author>
    <name>IAskWind</name>
    <email>iaskwind@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git 基本命令</title>
    <link href="http://iaskwind.com/2016/11/18/git_notes/"/>
    <id>http://iaskwind.com/2016/11/18/git_notes/</id>
    <published>2016-11-18T09:14:32.000Z</published>
    <updated>2016-11-18T09:42:03.000Z</updated>
    
    <content type="html">&lt;p&gt;git clone git tag 基本操作以及gitignore&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Git-Clone-项目基本命令&quot;&gt;&lt;a href=&quot;#Git-Clone-项目基本命令&quot; class=&quot;headerlink&quot; title=&quot;Git Clone 项目基本命令&quot;&gt;&lt;/a&gt;Git Clone 项目基本命令&lt;/h3&gt;&lt;p&gt;######Git global setup&lt;br&gt;    git config –global user.name “IAskWind”&lt;br&gt;    git config –global user.email “iaskwind@foxmail.com”&lt;/p&gt;
&lt;p&gt;######Create a new repository&lt;br&gt;    git clone &lt;a href=&quot;https://github.com/IAskWind/IAWExtensionTool.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/IAskWind/IAWExtensionTool.git&lt;/a&gt;&lt;br&gt;    cd IAWExtensionTool&lt;br&gt;    touch README.md&lt;br&gt;    git add README.md&lt;br&gt;    git commit -m “add README”&lt;br&gt;    git push -u origin master&lt;/p&gt;
&lt;p&gt;######Existing folder or Git repository&lt;br&gt;    cd existing_folder&lt;br&gt;    git init&lt;br&gt;    git remote add origin &lt;a href=&quot;https://github.com/IAskWind/IAWExtensionTool.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/IAskWind/IAWExtensionTool.git&lt;/a&gt;&lt;br&gt;    git add .&lt;br&gt;    git commit&lt;br&gt;    git push -u origin master        &lt;/p&gt;
&lt;h3 id=&quot;Git-tag-基本命令&quot;&gt;&lt;a href=&quot;#Git-tag-基本命令&quot; class=&quot;headerlink&quot; title=&quot;Git tag 基本命令&quot;&gt;&lt;/a&gt;Git tag 基本命令&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git push origin --delete tag &amp;apos;0.1.1&amp;apos; 删除远程tag
git tag 查看本地tag
git tag &amp;apos;0.1.2&amp;apos; 本地创建tag
git push --tags 本地tag 提交到服务器
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;gitignore&quot;&gt;&lt;a href=&quot;#gitignore&quot; class=&quot;headerlink&quot; title=&quot;.gitignore&quot;&gt;&lt;/a&gt;.gitignore&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;如果文件已经提交到版本库里了，然后再把它加到忽略文件里，需要删掉文件，
然后git rm 删掉本地库，然后add pull push 到服务器即可
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;开源让世界更美好&quot;&gt;&lt;a href=&quot;#开源让世界更美好&quot; class=&quot;headerlink&quot; title=&quot;开源让世界更美好&quot;&gt;&lt;/a&gt;开源让世界更美好&lt;/h3&gt;&lt;h3 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h3&gt;</content>
    
    <summary type="html">
    
      git
    
    </summary>
    
      <category term="git" scheme="http://iaskwind.com/categories/git/"/>
    
    
      <category term="git clone" scheme="http://iaskwind.com/tags/git-clone/"/>
    
      <category term="git tag" scheme="http://iaskwind.com/tags/git-tag/"/>
    
  </entry>
  
  <entry>
    <title>一些命令和文章的记录</title>
    <link href="http://iaskwind.com/2016/06/24/command_notes/"/>
    <id>http://iaskwind.com/2016/06/24/command_notes/</id>
    <published>2016-06-23T16:14:54.000Z</published>
    <updated>2016-06-24T01:14:03.000Z</updated>
    
    <content type="html">&lt;p&gt;平时用到的命令记录，防止忘记，好记性不如烂笔头。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Hexo-部署一些命令&quot;&gt;&lt;a href=&quot;#Hexo-部署一些命令&quot; class=&quot;headerlink&quot; title=&quot;Hexo 部署一些命令&quot;&gt;&lt;/a&gt;Hexo 部署一些命令&lt;/h3&gt;&lt;p&gt;我的nvm命令 在zsh 下才能用 如果不是zsh 需要切回zsh&lt;br&gt;nvm ls 列出当前安装的node版本&lt;/p&gt;
&lt;p&gt;nvm use 用具体的版本，然后hexo 命令就能使用了，否则会出现 zsh: command not found: hexo&lt;/p&gt;
&lt;p&gt;hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo d 发布(清理 生成 部署)&lt;/p&gt;
&lt;h3 id=&quot;命令行切换&quot;&gt;&lt;a href=&quot;#命令行切换&quot; class=&quot;headerlink&quot; title=&quot;命令行切换&quot;&gt;&lt;/a&gt;命令行切换&lt;/h3&gt;&lt;p&gt;切换回&lt;code&gt;bash&lt;/code&gt;的命令是chsh -s /bin/bash&lt;/p&gt;
&lt;p&gt;切换回&lt;code&gt;zsh&lt;/code&gt;的命令是chsh -s /bin/zsh&lt;/p&gt;
&lt;h3 id=&quot;android源码编译&quot;&gt;&lt;a href=&quot;#android源码编译&quot; class=&quot;headerlink&quot; title=&quot;android源码编译&quot;&gt;&lt;/a&gt;android源码编译&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;http://blog.csdn.net/wl9739/article/details/51429242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android源码的下载、编译与导入到Android Studio&lt;/a&gt; 可能会出现下面的问题：&lt;br&gt;执行POSIXLY_CORRECT=1 sudo port install gmake libsdl git gnupg 出现 &lt;code&gt;Port gmake not found&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据官方文档在安装了MacPorts之后，使用MacPorts安装依赖工具时，可能会遇到&lt;code&gt;Port gmake not found&lt;/code&gt;的错误，在安装之前需要先执行下面的命令。&lt;/p&gt;
&lt;p&gt;sudo port -d sync&lt;br&gt;然后就可以安装相关的工具了。&lt;/p&gt;
&lt;p&gt;POSIXLY_CORRECT=1 sudo port install gmake libsdl git gnupg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果安装始终失败，请直接写下载源码，下载完成后，再执行上面的命令试下&lt;/p&gt;
&lt;p&gt;在上面文章内，我运行的时候，&lt;code&gt;没有下载驱动&lt;/code&gt;，也成功启动模拟器，进入系统了&lt;/p&gt;
&lt;h3 id=&quot;开源让世界更美好&quot;&gt;&lt;a href=&quot;#开源让世界更美好&quot; class=&quot;headerlink&quot; title=&quot;开源让世界更美好&quot;&gt;&lt;/a&gt;开源让世界更美好&lt;/h3&gt;&lt;h3 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo你的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/4eaddcbe4d12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5分钟 搭建免费个人博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/wl9739/article/details/51429242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android源码的下载、编译与导入到Android Studio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://liuzhichao.com/2016/osx-download-and-build-android-source.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OS X 10.11下载和编译Android6.0源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 镜像使用帮助 清华源&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Hexo、bash、zsh、nvm
    
    </summary>
    
      <category term="sh" scheme="http://iaskwind.com/categories/sh/"/>
    
    
      <category term="Hexo" scheme="http://iaskwind.com/tags/Hexo/"/>
    
      <category term="bash" scheme="http://iaskwind.com/tags/bash/"/>
    
      <category term="zsh" scheme="http://iaskwind.com/tags/zsh/"/>
    
      <category term="nvm" scheme="http://iaskwind.com/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>一步步教你利用AwesomeSplash开源项目做炫酷启动页</title>
    <link href="http://iaskwind.com/2016/06/23/AwesomeSplash_svgpath/"/>
    <id>http://iaskwind.com/2016/06/23/AwesomeSplash_svgpath/</id>
    <published>2016-06-23T14:26:33.000Z</published>
    <updated>2016-06-23T16:43:09.000Z</updated>
    
    <content type="html">&lt;p&gt;最近项目需要开展，想做个炫酷的启动页，在github上看到开源项目&lt;a href=&quot;https://github.com/ViksaaSkool/AwesomeSplash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AwesomeSplash&lt;/a&gt;，打算利用这个项目做个启动页。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先上效果图：&lt;br&gt;&lt;img src=&quot;http://o8wlu6q9f.bkt.clouddn.com/%E7%A7%BB%E5%8A%A8%E6%89%A7%E6%B3%95.gif&quot; alt=&quot;移动执法&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;AwesomeSplash配置&quot;&gt;&lt;a href=&quot;#AwesomeSplash配置&quot; class=&quot;headerlink&quot; title=&quot;AwesomeSplash配置&quot;&gt;&lt;/a&gt;AwesomeSplash配置&lt;/h3&gt;&lt;p&gt;按照AwesomeSplash基本配置项目。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;configSplash.setBackgroundColor(R.color.primary); //any color you want form colors.xml
   configSplash.setAnimCircularRevealDuration(2000); //int ms
   configSplash.setRevealFlagX(Flags.REVEAL_RIGHT);  //or Flags.REVEAL_LEFT
   configSplash.setRevealFlagY(Flags.REVEAL_BOTTOM); //or Flags.REVEAL_TOP

   //Choose LOGO OR PATH; if you don&amp;apos;t provide String value for path it&amp;apos;s logo by default

   //Customize Logo
   configSplash.setLogoSplash(R.mipmap.ic_launcher); //or any other drawable
   configSplash.setAnimLogoSplashDuration(2000); //int ms
   configSplash.setAnimLogoSplashTechnique(Techniques.Bounce); //choose one form Techniques (ref: https://github.com/daimajia/AndroidViewAnimations)


   //Customize Path
   configSplash.setPathSplash(Constants.DROID_LOGO); //set path String
   configSplash.setOriginalHeight(400); //in relation to your svg (path) resource
   configSplash.setOriginalWidth(400); //in relation to your svg (path) resource
   configSplash.setAnimPathStrokeDrawingDuration(3000);
   configSplash.setPathSplashStrokeSize(3); //I advise value be &amp;lt;5
   configSplash.setPathSplashStrokeColor(R.color.accent); //any color you want form colors.xml
   configSplash.setAnimPathFillingDuration(3000);
   configSplash.setPathSplashFillColor(R.color.Wheat); //path object filling color


   //Customize Title
   configSplash.setTitleSplash(&amp;quot;My Awesome App&amp;quot;);
   configSplash.setTitleTextColor(R.color.Wheat);
   configSplash.setTitleTextSize(30f); //float value
   configSplash.setAnimTitleDuration(3000);
   configSplash.setAnimTitleTechnique(Techniques.FlipInX);
   configSplash.setTitleFont(&amp;quot;fonts/myfont.ttf&amp;quot;); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置后发现跑不起来，把项目中需要的颜色值替换成我们自己的。发现作者提供的依赖包里没有DROID_LOGO找到这个，实际上作者应该想让我们自己配置的。我这里要先看到作者放在git上的效果图，所以我从看了下作者github里的源码，从源码里找到DROID_LOGO 作者demo的设置的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static final String DROID_LOGO = &amp;quot;M 149.22,22.00\n&amp;quot; +
       &amp;quot;           C 148.23,20.07 146.01,16.51 146.73,14.32\n&amp;quot; +
       &amp;quot;             148.08,10.21 152.36,14.11 153.65,16.06\n&amp;quot; +
       &amp;quot;             153.65,16.06 165.00,37.00 165.00,37.00\n&amp;quot; +
       &amp;quot;             194.29,27.24 210.71,27.24 240.00,37.00\n&amp;quot; +
       &amp;quot;             240.00,37.00 251.35,16.06 251.35,16.06\n&amp;quot; +
       &amp;quot;             252.64,14.11 256.92,10.21 258.27,14.32\n&amp;quot; +
       &amp;quot;             258.99,16.51 256.77,20.08 255.78,22.00\n&amp;quot; +
       &amp;quot;             252.53,28.28 248.44,34.36 246.00,41.00\n&amp;quot; +
       &amp;quot;             252.78,43.16 258.78,48.09 263.96,52.85\n&amp;quot; +
       &amp;quot;             281.36,68.83 289.00,86.62 289.00,110.00\n&amp;quot; +
       &amp;quot;             289.00,110.00 115.00,110.00 115.00,110.00\n&amp;quot; +
       &amp;quot;             115.00,110.00 117.66,91.00 117.66,91.00\n&amp;quot; +
       &amp;quot;             120.91,76.60 130.30,62.72 141.04,52.85\n&amp;quot; +
       &amp;quot;             146.22,48.09 152.22,43.16 159.00,41.00\n&amp;quot; +
       &amp;quot;             159.00,41.00 149.22,22.00 149.22,22.00 Z\n&amp;quot; +
       &amp;quot;           M 70.80,56.00\n&amp;quot; +
       &amp;quot;           C 70.80,56.00 97.60,100.00 97.60,100.00\n&amp;quot; +
       &amp;quot;             101.34,106.21 108.32,116.34 110.21,123.00\n&amp;quot; +
       &amp;quot;             113.76,135.52 103.90,147.92 91.00,147.92\n&amp;quot; +
       &amp;quot;             78.74,147.92 74.44,139.06 69.00,130.00\n&amp;quot; +
       &amp;quot;             69.00,130.00 39.80,82.00 39.80,82.00\n&amp;quot; +
       &amp;quot;             35.73,75.29 28.40,66.08 29.20,58.00\n&amp;quot; +
       &amp;quot;             30.26,47.20 38.61,40.47 49.00,39.72\n&amp;quot; +
       &amp;quot;             61.22,40.24 64.96,46.28 70.80,56.00 Z\n&amp;quot; +
       &amp;quot;           M 375.80,58.00\n&amp;quot; +
       &amp;quot;           C 376.60,66.08 369.27,75.29 365.20,82.00\n&amp;quot; +
       &amp;quot;             365.20,82.00 336.00,130.00 336.00,130.00\n&amp;quot; +
       &amp;quot;             330.71,138.82 326.73,147.24 315.00,147.89\n&amp;quot; +
       &amp;quot;             301.74,148.63 291.14,135.87 294.79,123.00\n&amp;quot; +
       &amp;quot;             296.68,116.34 303.66,106.21 307.40,100.00\n&amp;quot; +
       &amp;quot;             307.40,100.00 333.00,58.00 333.00,58.00\n&amp;quot; +
       &amp;quot;             339.02,47.98 342.23,40.92 355.00,39.72\n&amp;quot; +
       &amp;quot;             365.83,40.00 374.69,46.77 375.80,58.00 Z\n&amp;quot; +
       &amp;quot;           M 289.00,116.00\n&amp;quot; +
       &amp;quot;           C 289.00,116.00 289.00,239.00 289.00,239.00\n&amp;quot; +
       &amp;quot;             288.98,249.72 285.92,257.31 275.00,261.10\n&amp;quot; +
       &amp;quot;             265.22,264.50 258.37,259.56 255.02,264.43\n&amp;quot; +
       &amp;quot;             253.78,266.24 254.00,269.84 254.00,272.00\n&amp;quot; +
       &amp;quot;             254.00,272.00 254.00,298.00 254.00,298.00\n&amp;quot; +
       &amp;quot;             254.00,304.85 254.77,310.07 250.36,315.93\n&amp;quot; +
       &amp;quot;             242.35,326.68 226.84,326.49 218.80,315.93\n&amp;quot; +
       &amp;quot;             215.07,311.00 215.01,306.83 215.00,301.00\n&amp;quot; +
       &amp;quot;             215.00,301.00 215.00,262.00 215.00,262.00\n&amp;quot; +
       &amp;quot;             215.00,262.00 190.00,262.00 190.00,262.00\n&amp;quot; +
       &amp;quot;             190.00,262.00 190.00,301.00 190.00,301.00\n&amp;quot; +
       &amp;quot;             189.99,306.83 189.93,311.00 186.20,315.93\n&amp;quot; +
       &amp;quot;             178.16,326.49 162.65,326.68 154.64,315.93\n&amp;quot; +
       &amp;quot;             151.09,311.22 151.01,307.61 151.00,302.00\n&amp;quot; +
       &amp;quot;             151.00,302.00 151.00,272.00 151.00,272.00\n&amp;quot; +
       &amp;quot;             151.00,269.84 151.22,266.24 149.98,264.43\n&amp;quot; +
       &amp;quot;             146.53,259.42 138.97,264.76 129.00,260.86\n&amp;quot; +
       &amp;quot;             118.39,256.72 116.02,248.29 116.00,238.00\n&amp;quot; +
       &amp;quot;             116.00,238.00 116.00,116.00 116.00,116.00\n&amp;quot; +
       &amp;quot;             116.00,116.00 289.00,116.00 289.00,116.00 Z&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把一些都改了，就能看到看到作者的效果图。&lt;/p&gt;
&lt;h3 id=&quot;利用GIMP做个SVG&quot;&gt;&lt;a href=&quot;#利用GIMP做个SVG&quot; class=&quot;headerlink&quot; title=&quot;利用GIMP做个SVG&quot;&gt;&lt;/a&gt;利用GIMP做个SVG&lt;/h3&gt;&lt;p&gt;从作者的demo中我们能看出上面的android机器人，是利用svg的path值绘制的，作者在github上也说了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So before diving into AwesomeSplash library, look into the libraries. Especially make sure you understand the concept of SVG path and look deeply on how to &lt;a href=&quot;http://www.useragentman.com/blog/2013/04/26/how-to-create-svg-paths-easily-using-the-gimp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;create&lt;/a&gt; you custom svg (and get the string values needed for AwesomeSplash).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;create&lt;/code&gt;的链接里说了，用GIMP创建的svg内的path才能用到，目前我试了一些svg生成工具。GIMP下载地址我会放在末尾.&lt;/p&gt;
&lt;p&gt;我这里从美工哪里拿到一个“移动执法.png“ 图片，然后用GIMP打开。如果你没有看到下面 工具箱&lt;br&gt;&lt;img src=&quot;http://o8wlu6q9f.bkt.clouddn.com/GIMP%E5%B7%A5%E5%85%B7%E7%AE%B1.png&quot; alt=&quot;GIMP工具箱&quot;&gt;&lt;br&gt;菜单 -&amp;gt; &lt;code&gt;工具&lt;/code&gt; -&amp;gt; &lt;code&gt;工具箱（或新建工具箱）&lt;/code&gt;就会弹出工具箱，&lt;br&gt;然后选择 &lt;code&gt;模糊选择工具&lt;/code&gt;(上图工具箱内第二版第2个)，然后把鼠标移动到图片上使你需要的汉字都变成虚线闪烁，这个时候，你会发现整个图片，包裹边框都变闪烁虚线了，但是我这里就上面那4个字变虚线就行了，我不要边框。这时候，你选择菜单 &lt;code&gt;查看&lt;/code&gt; 点一下 &lt;code&gt;显示图层边界&lt;/code&gt;，把当前选项前面的勾去掉，然后在菜单—&amp;gt; &lt;code&gt;选择&lt;/code&gt;-&lt;code&gt;反转&lt;/code&gt;，你就会发现边框闪烁虚线没有了。&lt;/p&gt;
&lt;h3 id=&quot;生成SVG&quot;&gt;&lt;a href=&quot;#生成SVG&quot; class=&quot;headerlink&quot; title=&quot;生成SVG&quot;&gt;&lt;/a&gt;生成SVG&lt;/h3&gt;&lt;p&gt;然后看到右边路径面板如下图 标注的&lt;code&gt;红色按钮&lt;/code&gt; 点击&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8wlu6q9f.bkt.clouddn.com/%E8%B7%AF%E5%BE%84%E9%9D%A2%E6%9D%BF.png&quot; alt=&quot;路径按钮&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击后会在当前路径面板生成 选区 ，在&lt;code&gt;选区&lt;/code&gt;上点击右键选择&lt;code&gt;导出路径&lt;/code&gt; 填上名称比如 测试.svg,然后选择保存路径就会生成svg。&lt;/p&gt;
&lt;p&gt;然后用文本格式打开，就会看到svg内&lt;code&gt;path&lt;/code&gt;字段，拷贝内部数值替换DROID_LOGO，&lt;br&gt;把&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;configSplash.setOriginalHeight(400); //in relation to your svg (path) resource
configSplash.setOriginalWidth(400);
换成我们自己的svg的宽高
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后把&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;configSplash.setRevealFlagX(Flags.REVEAL_RIGHT);  //or Flags.REVEAL_LEFT
        configSplash.setRevealFlagY(Flags.REVEAL_BOTTOM); //or       Flags.REVEAL_TOP

  改成

configSplash.setRevealFlagX(Flags.REVEAL_LEFT);  //or Flags.REVEAL_LEFT
configSplash.setRevealFlagY(Flags.REVEAL_TOP); //or Flags.REVEAL_TOP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就变成从左上，到左右铺展了。 我这里发现，我把上面的图片换成字体后，我发现我下面的就多余，我现在直接把下面设置成空字符串，时间设置为0 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;configSplash.setTitleSplash(&amp;quot;&amp;quot;);//去除字体
configSplash.setAnimTitleDuration(0); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后效果图，就有了大致的效果了，为什么说大致呢，你有没有发现作者原来的都是&lt;code&gt;OriginalHeight&lt;/code&gt;和&lt;code&gt;OriginalWidth&lt;/code&gt;都是400，如果你的svg的宽高大于这个值得时候，就会字体&lt;code&gt;变形&lt;/code&gt;。svg path引入的始终那么大，后来，我看了作者的源码，我没有发现对那个地方设置的，后来我找到&lt;br&gt;initPathAnimation方法，对path做处理的&lt;br&gt;接着看这个方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int viewSize =      getResources().getDimensionPixelSize(R.dimen.fourthSampleViewSize);//获取大小
//对布局进行设置
    FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(viewSize, viewSize);

    params.setMargins(0, 0, 0, 50);
    FillableLoaderBuilder loaderBuilder = new FillableLoaderBuilder();
    mPathLogo = loaderBuilder
            .parentView(mFl)
            .layoutParams(params)
            .svgPath(mConfigSplash.getPathSplash())
            .originalDimensions(mConfigSplash.getOriginalWidth(), mConfigSplash.getOriginalHeight())
            .strokeWidth(mConfigSplash.getPathSplashStrokeSize())
            .strokeColor(Color.parseColor(String.format(&amp;quot;#%06X&amp;quot;, (0xFFFFFF &amp;amp; getResources().getColor(mConfigSplash.getPathSplashStrokeColor())))))
            .fillColor(Color.parseColor(String.format(&amp;quot;#%06X&amp;quot;, (0xFFFFFF &amp;amp; getResources().getColor(mConfigSplash.getPathSplashFillColor())))))
            .strokeDrawingDuration(mConfigSplash.getAnimPathStrokeDrawingDuration())
            .fillDuration(mConfigSplash.getAnimPathFillingDuration())
            .clippingTransform(new PlainClippingTransform())
            .build();
    mPathLogo.setOnStateChangeListener(new OnStateChangeListener() {
        @Override
        public void onStateChange(int i) {
            if (i == State.FINISHED) {
                startTextAnimation();
            }
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 看到这里获取大小的值，对应path布局设置大小，但是我找了源码没有看到找个数值的值，于是我在自己的项目的dimens.xml 中定义了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//处理启动页的宽度
&amp;lt;dimen name=&amp;quot;fourthSampleViewSize&amp;quot;&amp;gt;350dp&amp;lt;/dimen&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定义后，我发现我的图片可以正常展示了。好了这样一个简单炫酷的加载页就完成了    &lt;/p&gt;
&lt;h3 id=&quot;开源让世界更美好&quot;&gt;&lt;a href=&quot;#开源让世界更美好&quot; class=&quot;headerlink&quot; title=&quot;开源让世界更美好&quot;&gt;&lt;/a&gt;开源让世界更美好&lt;/h3&gt;&lt;h3 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://gensho.acc.umu.se/pub/gimp/gimp/v2.8/osx/gimp-2.8.16-x86_64-1.dmg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GIMP下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/545014e51ad5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac屏幕录制与gif图片制作教程&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      AwesomeSplash、GIMP、PicGif、Splash
    
    </summary>
    
      <category term="Splash" scheme="http://iaskwind.com/categories/Splash/"/>
    
    
      <category term="AwesomeSplash" scheme="http://iaskwind.com/tags/AwesomeSplash/"/>
    
      <category term="GIMP" scheme="http://iaskwind.com/tags/GIMP/"/>
    
      <category term="PicGif" scheme="http://iaskwind.com/tags/PicGif/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit、GsonFormat、RxJava、RxAndroid简单实践</title>
    <link href="http://iaskwind.com/2016/06/15/reftofit-gsonformat-rxjava-rxandroid/"/>
    <id>http://iaskwind.com/2016/06/15/reftofit-gsonformat-rxjava-rxandroid/</id>
    <published>2016-06-15T14:11:54.000Z</published>
    <updated>2016-06-17T07:55:55.000Z</updated>
    
    <content type="html">&lt;p&gt;最近看了简书上很多说retrofit与rxjava的文章，所以今天我也来讲下我是如何用这些最新的东西的。废话不多说，直接上代码&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h3&gt;&lt;p&gt;开发工具肯定是androidstudio，这点以后都不用说了吧，因为现在github上很多东西都是支持androidstudio，目前使用感觉很方便，简单一行，就能把所有的功能引入进来。接下来我会用到rxjava rxandroid retrofit rxlifecycle  具体的这些事什么请自行去查阅，最后的时候，我会放在相关具体介绍的链接&lt;/p&gt;
&lt;h6 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h6&gt;&lt;p&gt;下面一些*version是我在gradle中定义的变量，防止我每次都要改多次的问题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ext {
    butterknifeVersion = &amp;apos;8.0.1&amp;apos;
    supportVersion = &amp;apos;23.2.1&amp;apos;
    retrofit2Version = &amp;apos;2.0.2&amp;apos;
    rxlifecycleVersion = &amp;apos;0.5.0&amp;apos;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面的拷贝项目的build.gradle 而不是工程的里面（又啰嗦了）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compile &amp;apos;io.reactivex:rxjava:1.1.3&amp;apos;
compile &amp;apos;io.reactivex:rxandroid:1.1.0&amp;apos;
compile &amp;quot;com.squareup.retrofit2:retrofit:${retrofit2Version}&amp;quot;
compile &amp;quot;com.squareup.retrofit2:converter-gson:${retrofit2Version}&amp;quot;
compile &amp;quot;com.squareup.retrofit2:adapter-rxjava:${retrofit2Version}&amp;quot;
 compile &amp;quot;com.trello:rxlifecycle:${rxlifecycleVersion}&amp;quot;
compile &amp;quot;com.trello:rxlifecycle-components:${rxlifecycleVersion}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&quot;rxlifecycle说明&quot;&gt;&lt;a href=&quot;#rxlifecycle说明&quot; class=&quot;headerlink&quot; title=&quot;rxlifecycle说明&quot;&gt;&lt;/a&gt;rxlifecycle说明&lt;/h6&gt;&lt;p&gt;此处使用rxlifecycle来处理一些订阅的回收&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trello/RxLifecycle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/trello/RxLifecycle&lt;/a&gt;就使被用来严格控制由于发布了一个订阅后，由于没有及时取消，导致Activity/Fragment无法销毁导致的内存泄露。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然我们要使用rxlifecycle就要按照它的规则来，我把目前的我的BaseActivity 继承 RxAppCompatActivity。具体使用的时候，我再说&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;GsonFormat使用&quot;&gt;&lt;a href=&quot;#GsonFormat使用&quot; class=&quot;headerlink&quot; title=&quot;GsonFormat使用&quot;&gt;&lt;/a&gt;GsonFormat使用&lt;/h3&gt;&lt;p&gt;假如服务端给我个接口，该接口返回json数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;接口地址：http://ip:端口/customer/getAppCutomerList 
请求方式：GET
请求参数(header):
参数名           类型       必填    参数位置        描述
accessToken     string     是     header        token
-------------------------------------------
请求参数(urlParam):
参数名         类型       必填      参数位置     描述
login_name    string    是        urlParam    登录名
pageNumber    int       是        urlParam    页数
name          string    是        urlParam    查询参数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 找个网络请求工具，我用的是Postmain谷歌浏览器的插件,填上对应的数据，按下send就能拿到对应的json&lt;br&gt;   &lt;img src=&quot;http://o8wlu6q9f.bkt.clouddn.com/5131D0FD-7FE4-40DB-81AD-283CC597D00C.png&quot; alt=&quot;postmain&quot;&gt;&lt;br&gt;   好了，拿到服务端返回json可以创建实体了&lt;br&gt;   先随便创建个实体，我这里创建CustomerReturnBean，直接在实体名称上，点击右键generate…选择GsonFormat（前提：你已经装了这个插件）填入上面返回的json，看看对应的属性类型是否是你想要的，没有问题，点击ok，生成对应的实体。&lt;/p&gt;
&lt;h3 id=&quot;Retrofit实例创建&quot;&gt;&lt;a href=&quot;#Retrofit实例创建&quot; class=&quot;headerlink&quot; title=&quot;Retrofit实例创建&quot;&gt;&lt;/a&gt;Retrofit实例创建&lt;/h3&gt;&lt;p&gt;类：AccountsService&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class AccountsService {

private static Retrofit.Builder retrofitBuilder = new Retrofit.Builder()
        .baseUrl(UrlContant.getBaseUrl())
        .addConverterFactory(GsonConverterFactory.create())
        .addCallAdapterFactory(RxJavaCallAdapterFactory.create());

public static AccountsApi createAccountsService() {
    return retrofitBuilder.build().create(AccountsApi.class);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对应的一些请求方法接口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface AccountsApi {
/**
 * 客户搜索查询接口
 *
 * @param loginName
 * @param pageNumber
 * @param name       查询关键字
 * @return
 */
@GET(UrlContant.searchCustomer)
Observable&amp;lt;CustomerReturnBean&amp;gt; searchCustomer(@Query(&amp;quot;login_name&amp;quot;) String     loginName, @Query(&amp;quot;pageNumber&amp;quot;) int pageNumber, @Query(&amp;quot;name&amp;quot;) String     name,@Header(&amp;quot;accessToken&amp;quot;) String accessToken);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为我这里很方法都需要login_name accessToken,这个是登录的时候，获取到保存在本地的。我这里设置个辅助类：&lt;br&gt;类：AccountsApiHelper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class AccountsApiHelper {

private static AccountsApiHelper instance;
private static AccountsApi service;
private String userName;
private String accessToken;

public static synchronized AccountsApiHelper getInstance() {
    if (instance == null) {
        instance = new AccountsApiHelper();
    }
    //初始化一些参数
    instance.init();
    return instance;
}

private void init() {
    if (service == null) {
        service = AccountsService.createAccountsService();
    }

}

private void getValue() {
    userName = AppContext.getInstance().getLoginName();
    accessToken = AppContext.getInstance().getAccessToken();
}
/**
 * 客户搜索查询接口
 * @param pageNumber
 * @param searchValue
 * @return
 */
public Observable&amp;lt;CustomerReturnBean&amp;gt; searchCustomer(int pageNumber,String searchValue){
    getValue();
    return service.searchCustomer(userName,pageNumber,searchValue,accessToken);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 这里实例构建完成了&lt;/p&gt;
&lt;h3 id=&quot;Retrofit-RxJava请求数据&quot;&gt;&lt;a href=&quot;#Retrofit-RxJava请求数据&quot; class=&quot;headerlink&quot; title=&quot;Retrofit+RxJava请求数据&quot;&gt;&lt;/a&gt;Retrofit+RxJava请求数据&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;private void loadData(int pageNumber,final boolean isRefresh,String searchValue) {
    //上面创建的接口
    AccountsApiHelper.getInstance().searchCustomer(pageNumber,searchValue)
                .subscribeOn(Schedulers.io())
                .compose(this.&amp;lt;CustomerReturnBean&amp;gt;bindToLifecycle()) //这里用到rxlifecycle
                .doOnSubscribe(new Action0() { //处理一开始需要的进度条加载，一开始需要的ui里面执行的
                    @Override
                    public void call() {
                        if (!customerWsrefresh.isRefreshing()) {
                            ViewUtils.setViewVisibility(commonLoading, true);
                            newton_cradle_loading.start();
                        }
                    }
                })
                .subscribeOn(AndroidSchedulers.mainThread()) //这里的subscribeOn为上面的doOnSubscribe设定执行线程
                .observeOn(AndroidSchedulers.mainThread())
                .doOnTerminate(new Action0() { //结束执行 关闭进度加载
                    @Override
                    public void call() {
                        ViewUtils.setViewVisibility(commonLoading, false);
                        newton_cradle_loading.stop();
                    }
                })
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Action1&amp;lt;CustomerReturnBean&amp;gt;() {
                    @Override
                    public void call(CustomerReturnBean customerReturnBean) {
                        //成功执行
                        handlerSuccess(customerReturnBean, isRefresh);
                    }
                }, new Action1&amp;lt;Throwable&amp;gt;() {
                    @Override
                    public void call(Throwable throwable) {
                        handlerFailure(isRefresh);
                    }
                });
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里拿到数据，具体后面该怎么展示，各位看官随意。&lt;/p&gt;
&lt;p&gt;各位感觉上面有什么错误和建议，欢迎提问谢谢&lt;/p&gt;
&lt;h3 id=&quot;补充：&quot;&gt;&lt;a href=&quot;#补充：&quot; class=&quot;headerlink&quot; title=&quot;补充：&quot;&gt;&lt;/a&gt;补充：&lt;/h3&gt;&lt;p&gt;有时候，我们需要延迟执行和放重复点击可以用如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.throttleFirst(10,TimeUnit.SECONDS)//重复点击处理
.delay(manualCheck?0:3, TimeUnit.SECONDS)//延迟执行
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;开源让世界更美好&quot;&gt;&lt;a href=&quot;#开源让世界更美好&quot; class=&quot;headerlink&quot; title=&quot;开源让世界更美好&quot;&gt;&lt;/a&gt;开源让世界更美好&lt;/h3&gt;&lt;h3 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1122/3711.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rxlifecycle使用详解，解决RxJava内存泄露问题&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      rxjava、java、android、Retrofit、RxAndroid
    
    </summary>
    
      <category term="Retrofit" scheme="http://iaskwind.com/categories/Retrofit/"/>
    
    
      <category term="Java" scheme="http://iaskwind.com/tags/Java/"/>
    
      <category term="RxJava" scheme="http://iaskwind.com/tags/RxJava/"/>
    
      <category term="Android" scheme="http://iaskwind.com/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://iaskwind.com/tags/Retrofit/"/>
    
      <category term="RxAnroid" scheme="http://iaskwind.com/tags/RxAnroid/"/>
    
      <category term="GsonFormat" scheme="http://iaskwind.com/tags/GsonFormat/"/>
    
  </entry>
  
</feed>
